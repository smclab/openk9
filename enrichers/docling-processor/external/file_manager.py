# generated by fastapi-codegen:
#   filename:  file-manager-openapi.yaml
#   timestamp: 2025-09-30T10:12:59+00:00

from __future__ import annotations

from fastapi import FastAPI, Path, Request

app = FastAPI(
    title='file-manager API',
    version='3.1.0-SNAPSHOT',
)


@app.post(
    '/api/file-manager/v1/delete/{resourceId}/{schemaName}',
    response_model=None,
    tags=['Delete Endpoint'],
)
def post_api_file_manager_v1_delete_resource_id_schema_name(
    resource_id: str = Path(..., alias='resourceId'),
    schema_name: str = Path(..., alias='schemaName'),
) -> None:
    """
    Delete
    """
    pass


@app.get(
    '/api/file-manager/v1/download/base64/{resourceId}/{schemaName}',
    response_model=str,
    tags=['Download As Base 64 Endpoint'],
)
def get_api_file_manager_v1_download_base64_resource_id_schema_name(
    resource_id: str = Path(..., alias='resourceId'),
    schema_name: str = Path(..., alias='schemaName'),
) -> str:
    """
    Download As Base 64
    """
    pass


@app.get(
    '/api/file-manager/v1/download/byte/{resourceId}/{schemaName}',
    response_model=bytes,
    tags=['Download As Byte Array'],
)
def get_api_file_manager_v1_download_byte_resource_id_schema_name(
    resource_id: str = Path(..., alias='resourceId'),
    schema_name: str = Path(..., alias='schemaName'),
) -> bytes:
    """
    Download As Byte
    """
    pass


@app.get(
    '/api/file-manager/v1/download/{resourceId}/{schemaName}',
    response_model=bytes,
    tags=['Download Endpoint'],
)
def get_api_file_manager_v1_download_resource_id_schema_name(
    resource_id: str = Path(..., alias='resourceId'),
    schema_name: str = Path(..., alias='schemaName'),
) -> bytes:
    """
    Download
    """
    pass


@app.post(
    '/api/file-manager/v1/upload/{datasourceId}/{fileId}/{schemaName}',
    response_model=str,
    tags=['Upload Endpoint'],
)
def post_api_file_manager_v1_upload_datasource_id_file_id_schema_name(
    datasource_id: str = Path(..., alias='datasourceId'),
    file_id: str = Path(..., alias='fileId'),
    schema_name: str = Path(..., alias='schemaName'),
    request: Request = ...,
) -> str:
    """
    Upload
    """
    pass
