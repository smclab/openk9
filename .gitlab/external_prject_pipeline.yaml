stages:
- deploy

variables:
  GIT_STRATEGY: none
  ARGOCD_SERVER: "argocd.openk9.io"

  # User-Namespace Mappings - All in one place
  # Format: USERNAME_NAMESPACES (space-separated list)
  MIRKO_ZIZZARI_NAMESPACES: "k9-backend k9-backend-oracle"
  MICHELE_BASTIANELLI_NAMESPACES: "k9-backend01"
  LORENZO_VENNERI_NAMESPACES: "k9-frontend"
  GIORGIO_BARTOLOMEO_NAMESPACES: "k9-frontend"
  LUCA_CALLOCCHIA_NAMESPACES: "k9-ai"
  DMYTRO_KOZAK_NAMESPACES: "k9-backend k9-backend01 k9-frontend"

# Main restart job - completely self-contained
restart-component:
  image: smclab/argocd-cli:latest
  stage: deploy
  variables:
    GIT_STRATEGY: none
    ARGOCD_SERVER: "argocd.openk9.io"
  before_script:
  - |
    echo "üöÄ OpenK9 Component Restart Pipeline (Self-Contained)"
    echo "‚ñ∂Ô∏è Trigger Job: $TRIGGER_JOB"
    echo "‚ñ∂Ô∏è Component Type: $COMPONENT_TYPE"
    echo "‚ñ∂Ô∏è GitLab User: $GITLAB_USER_LOGIN"
    echo "‚ñ∂Ô∏è Image Tag: $IMAGE_TAG"
    echo "‚ñ∂Ô∏è Source Branch: $CI_COMMIT_BRANCH"
    echo "----------------------------------------"
    argocd login "${ARGOCD_SERVER}" --username "${ARGOCD_USERNAME}" --password "${ARGOCD_PASSWORD}" --grpc-web
  script:
  - |
    COMPONENT_NAME="${TRIGGER_JOB#restart-}"
    echo "üì¶ Component resolved: $COMPONENT_NAME"
  - |
    if [[ "$CI_COMMIT_BRANCH" == "main" || -n "$CI_COMMIT_TAG" ]]; then
      echo "üöÄ Main branch/tag: restart in all appropriate namespaces"
      
      case "$COMPONENT_TYPE" in
        "backend")
          NAMESPACES="k9-ai k9-frontend"
          ;;
        "backend-oracle")
          NAMESPACES="k9-backend-oracle"
          ;;
        "ai")
          NAMESPACES="k9-backend k9-backend01 k9-test k9-frontend"
          ;;
        "frontend")
          NAMESPACES="k9-backend k9-backend01 k9-test k9-ai"
          ;;
        "test")
          NAMESPACES="k9-test"
          ;;
        *)
          echo "üîç Component type not specified, determining from component name: $COMPONENT_NAME"
          case "$COMPONENT_NAME" in
            *-ui|admin-ui|tenant-ui|search-frontend)
              NAMESPACES="k9-backend k9-backend01 k9-test k9-ai"
              echo "üì± Detected frontend component: $COMPONENT_NAME - propagating to other environments"
              ;;
            datasource|searcher|ingestion|tenant-manager|file-manager|tika|resources-validator|k8s-client|entity-manager)
              NAMESPACES="k9-ai k9-frontend"
              echo "üîß Detected backend component: $COMPONENT_NAME - propagating to other environments"
              ;;
            *-ai|embedding-*|rag-*|talk-to)
              NAMESPACES="k9-backend k9-backend01 k9-test k9-frontend"
              echo "ü§ñ Detected AI component: $COMPONENT_NAME - propagating to other environments"
              ;;
            *)
              echo "‚ö†Ô∏è Unknown component '$COMPONENT_NAME', using conservative backend propagation"
              NAMESPACES="k9-ai k9-frontend"
              ;;
          esac
          ;;
      esac
      
    elif [[ "$CI_COMMIT_BRANCH" =~ ^[0-9]+-.*$ ]]; then
      echo "üåø Feature branch: restart in user's dedicated namespace(s)"
      
      USER_VAR=$(echo "${GITLAB_USER_LOGIN}" | tr '.-' '_' | tr '[:lower:]' '[:upper:]')_NAMESPACES
      USER_NAMESPACES=$(eval echo \$${USER_VAR})
      
      if [[ -n "$USER_NAMESPACES" ]]; then
        NAMESPACES="$USER_NAMESPACES"
        echo "‚úÖ User $GITLAB_USER_LOGIN authorized for namespaces: $NAMESPACES"
      else
        echo "‚õî User $GITLAB_USER_LOGIN not found in configuration"
        echo "üí° Available users: mirko.zizzari, michele.bastianelli, lorenzo.venneri, giorgio.bartolomeo, luca.callocchia"
        exit 1
      fi
      
    else
      echo "‚õî Unsupported branch pattern: $CI_COMMIT_BRANCH"
      exit 1
    fi

    echo "üéØ Target Namespaces: $NAMESPACES"
  - |
    get_argocd_app_name() {
      local component=$1
      local target_ns=$2
      
      case "$component" in
        "ingestion")
          component="openk9-ingestion"
          ;;
        "datasource")
          if [[ "$target_ns" == "k9-backend-oracle" ]]; then
            echo "openk9-datasource"
            return
          fi
          ;;
      esac
      
      case "$target_ns" in
        "k9-backend") echo "${component}-backend" ;;
        "k9-backend01") echo "${component}-backend01" ;;
        "k9-backend-oracle") echo "${component}-oracle" ;;
        "k9-ai") echo "${component}-ai" ;;
        "k9-frontend") echo "${component}-frontend" ;;
        "k9-test") echo "${component}-test" ;;
        "k9-stable") echo "${component}-stable" ;;
        *) echo "${component}-${target_ns#k9-}" ;;
      esac
    }
  - |
    echo "üöÄ Restarting $COMPONENT_NAME in namespaces: $NAMESPACES"
    FAILED_DEPLOYMENTS=""

    for ns in $NAMESPACES; do
      echo "üîß Processing namespace: $ns"
      
      ARGOCD_APP_NAME=$(get_argocd_app_name "$COMPONENT_NAME" "$ns")
      echo "üéØ ArgoCD app name: $ARGOCD_APP_NAME"
      
      if argocd app get "$ARGOCD_APP_NAME" --grpc-web >/dev/null 2>&1; then
        echo "‚úÖ Found app $ARGOCD_APP_NAME in argocd namespace"
        
        if argocd app set "$ARGOCD_APP_NAME" --helm-set image.tag=$IMAGE_TAG --grpc-web; then
          echo "‚úÖ Updated image.tag=$IMAGE_TAG for $ARGOCD_APP_NAME"
          
          if argocd app actions run "$ARGOCD_APP_NAME" restart --kind Deployment --namespace "$ns" --grpc-web; then
            echo "‚úÖ Successfully restarted $COMPONENT_NAME in $ns"
          else
            echo "‚ùå Failed to restart $COMPONENT_NAME in $ns"
            FAILED_DEPLOYMENTS="$FAILED_DEPLOYMENTS $ns"
          fi
        else
          echo "‚ùå Failed to update image tag for $ARGOCD_APP_NAME"
          FAILED_DEPLOYMENTS="$FAILED_DEPLOYMENTS $ns"
        fi
      else
        echo "‚ö†Ô∏è App $ARGOCD_APP_NAME not found, skipping..."
        echo "üí° Available apps in argocd namespace:"
        argocd app list --output name | grep -E "(${COMPONENT_NAME}|${ns#k9-})" || echo "   (none found)"
      fi
    done

    if [[ -n "$FAILED_DEPLOYMENTS" ]]; then
      echo "‚ö†Ô∏è Some deployments failed in namespaces:$FAILED_DEPLOYMENTS"
      echo "‚úÖ Check individual namespace logs above for details"
    else
      echo "üéâ All deployments completed successfully!"
    fi
  after_script:
  - |
    echo "‚úÖ Restart pipeline completed for $COMPONENT_NAME"
  rules:
  - if: '$TRIGGER_JOB =~ /^restart-.*$/'
  - when: never
