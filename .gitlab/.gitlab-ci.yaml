#############################################
#            GITLAB CI PIPELINE             #
#############################################

# Reusable file change patterns using YAML anchors
.java_files_changes: &java_files_changes
  - core/**/*
  - vendor/**/*
  - pom.xml

.js_files_changes: &js_files_changes
  - js-packages/**/*
  - "*.json"
  - "*.js"
  - "*.ts"
  - "*.tsx"

.java_and_js_files_changes: &java_and_js_files_changes
  - core/**/*
  - vendor/**/*
  - js-packages/**/*
  - pom.xml
  - "*.json"
  - "*.js"
  - "*.ts"
  - "*.tsx"

stages:
- trigger
- build
- restart
- quality
- container-scanning
- dependency-check
- build-verifier
- publish
- push

# Global cache, differentiated by environment or specific dependencies
cache:
  key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
  paths:
  - .m2/repository
  policy: pull-push

variables:
  # Image used for container scanning
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:7"

# WHEN THERE ARE CHANGES IN HELM CHART TRIGGER (but manual)
include:
- local: '/.gitlab/.gitlab-templates.yaml'

################################################################################
#                               TRIGGER DATASOURCE                             #
################################################################################
Trigger Datasource:
  stage: trigger
  rules:
  # Case 1: push on main
  - if: '$CI_COMMIT_BRANCH == "main"'

  # Case 2: approved merge request
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

  # Case 3: tag creation
  - if: "$CI_COMMIT_TAG"

  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  # Case 4: feature branch matching ^\d+-.*$ + dmytro or michele
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && ($GITLAB_USER_LOGIN == 'mirko.zizzari' || $GITLAB_USER_LOGIN == 'michele.bastianelli')"
    changes:
    - core/app/datasource/**/*
    - core/service/**/*
    - core/common/graphql-util/**/*
    - core/common/model/**/*
    - core/common/resources-common/**/*
    - core/common/util/**/*
    - core/client/common/**/*
    - core/client/grpc/**/*
    - core/api/tenant-manager-api/**/*
    - core/common/datasource-model/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-datasource.yaml"

################################################################################
#                               TRIGGER SEARCHER                               #
################################################################################
Trigger Searcher:
  stage: trigger
  rules:
  # Case 1: push on main
  - if: '$CI_COMMIT_BRANCH == "main"'

  # Case 2: approved merge request
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

  # Case 3: tag creation
  - if: "$CI_COMMIT_TAG"

  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  # Case 4: feature branch matching ^\d+-.*$ + dmytro or michele
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && ($GITLAB_USER_LOGIN == 'mirko.zizzari' || $GITLAB_USER_LOGIN == 'michele.bastianelli')"
    changes:
    - core/common/resources-common/**/*
    - core/app/searcher/**/*
    - core/service/**/*
    - core/client/common/**/*
    - core/client/grpc/**/*
    - core/api/tenant-manager-api/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-searcher.yaml"

################################################################################
#                               TRIGGER INGESTION                              #
################################################################################
Trigger Ingestion:
  stage: trigger
  rules:
  # Case 1: push on main
  - if: '$CI_COMMIT_BRANCH == "main"'

  # Case 2: approved merge request
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

  # Case 3: tag creation
  - if: "$CI_COMMIT_TAG"

  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never

  # Case 4: feature branch matching ^\d+-.*$ + dmytro or michele
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && ($GITLAB_USER_LOGIN == 'mirko.zizzari' || $GITLAB_USER_LOGIN == 'michele.bastianelli')"
    changes:
    - core/app/ingestion/**/*
    - core/common/util/**/*
    - core/common/resources-common/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-ingestion.yaml"

################################################################################
#                              TRIGGER K8S-CLIENT                              #
################################################################################
Trigger K8S-Client:
  stage: trigger
  rules:
  # Case 1: push on main
  - if: '$CI_COMMIT_BRANCH == "main"'

  # Case 2: approved merge request
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

  # Case 3: tag creation
  - if: "$CI_COMMIT_TAG"

  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never

  # Case 4: feature branch matching ^\d+-.*$ + dmytro or michele
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && ($GITLAB_USER_LOGIN == 'mirko.zizzari' || $GITLAB_USER_LOGIN == 'michele.bastianelli')"
    changes:
    - core/app/k8s-client/**/*
    - core/app/service/**/*
    - core/client/grpc/**/*
    - core/common/k8s-manifest/**/*
    - core/common/resources-common/**/*
    - core/common/util/**/*
    - core/client/common/**/*
    - core/api/tenant-manager-api/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-k8s-client.yaml"

################################################################################
#                             TRIGGER FILE-MANAGER                             #
################################################################################
Trigger File-Manager:
  stage: trigger
  rules:
  # Caso 1: push su main
  - if: '$CI_COMMIT_BRANCH == "main"'

  # Caso 2: merge request approvata
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

  # Caso 3: creazione tag
  - if: "$CI_COMMIT_TAG"

  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never

  # Case 4: feature branch matching ^\d+-.*$ + dmytro or michele
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && ($GITLAB_USER_LOGIN == 'mirko.zizzari' || $GITLAB_USER_LOGIN == 'michele.bastianelli')"
    changes:
    - core/app/file-manager/**/*
    - core/common/resources-common/**/*
    - core/client/grpc/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-file-manager.yaml"

################################################################################
#                           TRIGGER TENANT-MANAGER                             #
################################################################################
Trigger Tenant-Manager:
  stage: trigger
  rules:
  # Caso 1: push su main
  - if: '$CI_COMMIT_BRANCH == "main"'

  # Caso 2: merge request approvata
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

  # Caso 3: creazione tag
  - if: "$CI_COMMIT_TAG"

  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never

  # Case 4: feature branch matching ^\d+-.*$ + dmytro or michele
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && ($GITLAB_USER_LOGIN == 'mirko.zizzari' || $GITLAB_USER_LOGIN == 'michele.bastianelli')"
    changes:
    - core/app/tenant-manager/**/*
    - core/common/graphql-util/**/*
    - core/common/model/**/*
    - core/common/resources-common/**/*
    - core/common/util/**/*
    - core/client/common/**/*
    - core/client/grpc/**/*
    - core/api/tenant-manager-api/**/*
    - core/common/datasource-model/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-tenant-manager.yaml"

################################################################################
#                                TRIGGER TIKA                                  #
################################################################################
Trigger Tika:
  stage: trigger
  rules:
  # Case 1: push on main
  - if: '$CI_COMMIT_BRANCH == "main"'

  # Case 2: approved merge request
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED == "true"'

  # Case 3: tag creation
  - if: "$CI_COMMIT_TAG"

  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never

  # Case 4: feature branch matching ^\d+-.*$ + dmytro or michele
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && ($GITLAB_USER_LOGIN == 'mirko.zizzari' || $GITLAB_USER_LOGIN == 'michele.bastianelli')"
    changes:
    - core/app/tika/**/*
    - core/common/resources-common/**/*
  trigger:
    include: "/.gitlab/.gitlab-ci-tika.yaml"

################################################################################
#                         PIPELINE FRONT-END TRIGGERS                          #
################################################################################

# SEARCH FRONTEND
Trigger Search Frontend:
  stage: trigger
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes:
    - js-packages/search-frontend/**/*
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - js-packages/search-frontend/**/*
  # Caso per branch feature (rimosso controllo autore)
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
    changes:
    - js-packages/search-frontend/**/*
  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-search-frontend.yaml"
    strategy: depend

# ADMIN FRONTEND
Trigger Admin Frontend:
  stage: trigger
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes:
    - js-packages/admin-ui/**/*
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - js-packages/admin-ui/**/*
  # Caso per branch feature (rimosso controllo autore)
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
    changes:
    - js-packages/admin-ui/**/*
  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-admin-frontend.yaml"
    strategy: depend

# TENANT FRONTEND
Trigger Tenant Frontend:
  stage: trigger
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes:
    - js-packages/tenant-ui/**/*
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - js-packages/tenant-ui/**/*
  # Caso per branch feature (rimosso controllo autore)
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
    changes:
    - js-packages/tenant-ui/**/*
  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-tenant-frontend.yaml"
    strategy: depend

# TALK-TO FRONTEND
Trigger Talk-To Frontend:
  stage: trigger
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes:
    - js-packages/talk-to/**/*
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - js-packages/talk-to/**/*
  # Caso per branch feature (rimosso controllo autore)
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/"
    changes:
    - js-packages/talk-to/**/*
  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-talk-to.yaml"
    strategy: depend

# OPENK9-CHATBOT
Trigger OpenK9-Chatbot:
  stage: trigger
  rules:
  # Feature branch: non parte nessuna pipeline
  # Merge request: fetch version -> build verifier
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes:
    - js-packages/openk9-chatbot/**/*
  # Main: fetch version -> build verifier -> Publish -> dependency check
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - js-packages/openk9-chatbot/**/*
  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-openk9-chatbot.yaml"
    strategy: depend

################################################################################
#                           MAVEN DEPENDENCY CHECK                              #
################################################################################
Maven Dependency Check:
  stage: dependency-check
  image: eclipse-temurin:21-jdk
  variables:
    MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  before_script:
  - cd core
  - ./mvnw install
  script:
  - ./mvnw -pl '!../vendor/hibernate-rx-multitenancy, !../vendor/hibernate-rx-multitenancy/runtime, !../vendor/hibernate-rx-multitenancy/deployment'  dependency-check:aggregate
  allow_failure: true
  artifacts:
    paths:
    - core/target/dependency-check-report.html
    expire_in: 1 week
  cache:
    key: "${CI_COMMIT_BRANCH}-dependency-check"
    paths:
    - $CI_PROJECT_DIR/.m2/repository
    policy: pull-push
  rules:
  # Case 1: push on main - only when Java files change
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes: *java_files_changes
  # Case 2: MR on main - only when Java files change
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes: *java_files_changes
  # Case 3: tag - only when Java files change
  - if: "$CI_COMMIT_TAG"
    changes: *java_files_changes
  # Block first execution when branch just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never

################################################################################
#                                 SONARQUBE CHECK                               #
################################################################################
SonarQube Check:
  stage: quality
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
    - .sonar/cache
  before_script:
  - mkdir /tmp/empty
  script:
  - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
  rules:
  # Case 1: push on main - only when Java or JS files change
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes: *java_and_js_files_changes
  # Case 2: MR on main - only when Java or JS files change
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes: *java_and_js_files_changes
  # Case 3: tag - only when Java or JS files change
  - if: "$CI_COMMIT_TAG"
    changes: *java_and_js_files_changes
  # Block first execution when branch just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never

################################################################################
#                                AI PIPELINE                                   #
################################################################################

# Build RAG MODULE
Trigger Rag Module:
  stage: trigger
  # Non blocca la pipeline se fallisce
  allow_failure: true
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - ai-packages/rag-module/**/*
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes:
    - ai-packages/rag-module/**/*
  # Caso specifico per Luca Callocchia
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && $GITLAB_USER_LOGIN == 'luca.callocchia'"
    changes:
    - ai-packages/rag-module/**/*
  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-rag-module.yaml"

# Procedere a fare la build di Ebedding anche se RAG fallisce
Trigger Embedding Module:
  stage: trigger
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - ai-packages/embedding-modules/**/*
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes:
    - ai-packages/embedding-modules/**/*
  # feature + luca
  - if: "$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/ && $GITLAB_USER_LOGIN == 'luca.callocchia'"
    changes:
    - ai-packages/embedding-modules/**/*
  # Blocco della prima esecuzione quando branch appena creato
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-embedding-module.yaml"

################################################################################
#                              Connectors pipeline                             #
################################################################################



Trigger Connectors Build:
  stage: trigger
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - connectors/**/*
  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/.gitlab-ci-connectors.yaml"

################################################################################
#                              TRIGGER HELM CHARTS                             #
################################################################################



Trigger Helm Base Core:
  stage: trigger
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - helm-charts/**/*
  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/helm-charts-pipeline/.gitlab-ci-01-base-core.yaml"

Trigger Helm File Handling:
  stage: trigger
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - helm-charts/**/*
  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/helm-charts-pipeline/.gitlab-ci-02-file-handling.yaml"

Trigger Helm Gen AI:
  stage: trigger
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - helm-charts/**/*
  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/helm-charts-pipeline/.gitlab-ci-03-gen-ai.yaml"

Trigger Helm Knowledge Handling:
  stage: trigger
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - helm-charts/**/*
  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/helm-charts-pipeline/.gitlab-ci-04-knowledge-handling.yaml"

Trigger Helm Utilities:
  stage: trigger
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - helm-charts/**/*
  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/helm-charts-pipeline/.gitlab-ci-06-utilities.yaml"

Trigger Helm Connectors:
  stage: trigger
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - connectors/**/*
  # Block the first execution when branch is just created
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  trigger:
    include: "/.gitlab/helm-charts-pipeline/.gitlab-ci-05-connectors.yaml"
