# Generic build template used by each component (datasource, ingestion, etc.)

.build_template:
  #image: eclipse-temurin:21-jdk
  image: maven:3.9.6-eclipse-temurin-21
  variables:
    TEST_NAME: "local/test"
    DOCKER_HOST: "tcp://localhost:2375"
    DOCKER_TLS_CERTDIR: ""
    MAVEN_CLI_OPTS: "--batch-mode -DskipTests"
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  cache:
    key: "$COMPONENT"
    paths:
    - $CI_PROJECT_DIR/.m2/repository
  artifacts:
    paths:
    - "$CI_PROJECT_DIR/core/app/$COMPONENT/target/"
    expire_in: 2 days

.container-scanning-template:
  stage: container-scanning
  image: $CS_ANALYZER_IMAGE
  variables:
    CS_REGISTRY_USER: "$CI_REGISTRY_USERNAME"
    CS_REGISTRY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    GIT_STRATEGY: fetch
  allow_failure: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      cyclonedx: "**/gl-sbom-*.cdx.json"
    paths: [ gl-container-scanning-report.json, gl-dependency-scanning-report.json, "**/gl-sbom-*.cdx.json" ]
  #dependencies: [$DEPENDS_ON]
  before_script:
  - export VERSION=$(cat $CI_PROJECT_DIR/.version | grep -oE '^[^=]+$')
  - export CS_IMAGE="$CI_REGISTRY_NAME/openk9/$REGISTRY_COMPONENT_NAME:$VERSION"
  - echo "Using version $VERSION"
  script:
  - gtcs scan

.dependency_check_frontend_template:
  image: "registry.gitlab.com/gitlab-org/security-products/analyzers/npm-audit:1.4.0"
  variables:
    TOOL: yarn
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    paths:
    - gl-dependency-scanning-report.json
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    changes:
    - js-packages/**/*
  - if: '$CI_COMMIT_BRANCH == "main"'
    changes:
    - js-packages/**/*

# ========================================
# TEMPLATE: .restart_job_template (UPDATED)
# ========================================
# This template manages the restart of ArgoCD pods based on the pipeline context:
#
# ‚ñ∂Ô∏è 1. ON "main" BRANCH OR TAG:
#    - Dynamically retrieves the IMAGE_TAG value based on component type:
#        - frontend  ‚ûù from version.env (VERSION=...)
#        - backend   ‚ûù from .version (containing only the version number)
#        - ai        ‚ûù from config.env (VERSION=...)
#    - If no file is found, fallback to "dev-SNAPSHOT"
#
#    - Executes restart in these namespaces (UPDATED LOGIC):
#        - backend       ‚ûù k9-backend, k9-backend01, k9-test
#        - backend-oracle ‚ûù k9-backend-oracle
#        - ai            ‚ûù k9-ai
#        - frontend      ‚ûù k9-frontend
#        - test          ‚ûù k9-test
#
# ‚ñ∂Ô∏è 2. ON FEATURE BRANCH (e.g. 123-new-feature):
#    - The restart happens based on COMPONENT_TYPE and passes GITLAB_USER_LOGIN
#      to let the target pipeline determine the correct namespace:
#        - Passes COMPONENT_TYPE and GITLAB_USER_LOGIN to target pipeline
#        - Target pipeline determines namespace based on user + component type
#        - Uses appropriate SNAPSHOT tags per component type
#
# ‚ñ∂Ô∏è 3. OTHER BRANCHES:
#    - No action performed
#
# NOTE:
# - This template triggers the target pipeline with the necessary parameters
# - The target pipeline (.gitlab-ci.yml) handles the actual ArgoCD restart logic
# - User-based namespace determination is handled by the target pipeline

.restart_job_template:
  stage: restart
  image: alpine:latest
  script:
  - apk add --no-cache bash curl
  - echo "CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH"
  - echo "GITLAB_USER_LOGIN=$GITLAB_USER_LOGIN"
  - echo "COMPONENT_NAME=$COMPONENT_NAME"
  - echo "COMPONENT_TYPE=$COMPONENT_TYPE"
  - |
    bash -c '
    if [ "$CI_COMMIT_BRANCH" = "main" ] || [ -n "$CI_COMMIT_TAG" ]; then
      echo "üîÅ Merge on main or tag: calculating IMAGE_TAG for $COMPONENT_NAME"

      # üîÅ Dynamically retrieve IMAGE_TAG based on component type
      if [ "$COMPONENT_TYPE" = "frontend" ] && [ -f "$CI_PROJECT_DIR/version.env" ]; then
        source "$CI_PROJECT_DIR/version.env"
        export IMAGE_TAG="$VERSION"
        echo "‚úÖ Loaded IMAGE_TAG (frontend) from version.env: $IMAGE_TAG"

      elif [ "$COMPONENT_TYPE" = "backend" ] && [ -f "$CI_PROJECT_DIR/.version" ]; then
        IMAGE_TAG=$(cat "$CI_PROJECT_DIR/.version")
        echo "‚úÖ Loaded IMAGE_TAG (backend) from .version: $IMAGE_TAG"

      elif [ "$COMPONENT_TYPE" = "ai" ] && [ -f "$CI_PROJECT_DIR/config.env" ]; then
        source "$CI_PROJECT_DIR/config.env"
        export IMAGE_TAG="$VERSION"
        echo "‚úÖ Loaded IMAGE_TAG (ai) from config.env: $IMAGE_TAG"

      else
        echo "‚ö†Ô∏è No version file found, using fallback"
        export IMAGE_TAG="dev-SNAPSHOT"
      fi

      # ‚úÖ NEW LOGIC: Restart based on component type with updated namespace mapping
      if [ "$COMPONENT_TYPE" = "backend" ]; then
        echo "üîÅ Restarting backend on ALL namespaces EXCEPT backend namespaces (main branch deployment)"
        for ns in k9-ai k9-frontend; do
          curl -X POST \
            -F "token=${RESTART_TRIGGER_TOKEN}" \
            -F "variables[TRIGGER_JOB]=restart-${COMPONENT_NAME}" \
            -F "variables[NAMESPACE]=$ns" \
            -F "variables[IMAGE_TAG]=$IMAGE_TAG" \
            -F "variables[COMPONENT_TYPE]=$COMPONENT_TYPE" \
            -F "variables[CI_COMMIT_BRANCH]=$CI_COMMIT_BRANCH" \
            -F "ref=master" \
            "${RESTART_TRIGGER_URL}"
        done

      elif [ "$COMPONENT_TYPE" = "backend-oracle" ]; then
        echo "üîÅ Restarting backend-oracle on k9-backend-oracle"
        curl -X POST \
          -F "token=${RESTART_TRIGGER_TOKEN}" \
          -F "variables[TRIGGER_JOB]=restart-${COMPONENT_NAME}" \
          -F "variables[NAMESPACE]=k9-backend-oracle" \
          -F "variables[IMAGE_TAG]=$IMAGE_TAG" \
          -F "variables[COMPONENT_TYPE]=$COMPONENT_TYPE" \
          -F "variables[CI_COMMIT_BRANCH]=$CI_COMMIT_BRANCH" \
          -F "ref=master" \
          "${RESTART_TRIGGER_URL}"

      elif [ "$COMPONENT_TYPE" = "ai" ]; then
        echo "üîÅ Restarting AI on ALL namespaces EXCEPT k9-ai (main branch deployment)"
        for ns in k9-backend k9-backend01 k9-test k9-frontend; do
          curl -X POST \
            -F "token=${RESTART_TRIGGER_TOKEN}" \
            -F "variables[TRIGGER_JOB]=restart-${COMPONENT_NAME}" \
            -F "variables[NAMESPACE]=$ns" \
            -F "variables[IMAGE_TAG]=$IMAGE_TAG" \
            -F "variables[COMPONENT_TYPE]=$COMPONENT_TYPE" \
            -F "variables[CI_COMMIT_BRANCH]=$CI_COMMIT_BRANCH" \
            -F "ref=master" \
            "${RESTART_TRIGGER_URL}"
        done

      elif [ "$COMPONENT_TYPE" = "frontend" ]; then
        echo "üîÅ Restarting frontend on ALL namespaces EXCEPT k9-frontend (main branch deployment)"
        for ns in k9-backend k9-backend01 k9-test k9-ai; do
          curl -X POST \
            -F "token=${RESTART_TRIGGER_TOKEN}" \
            -F "variables[TRIGGER_JOB]=restart-${COMPONENT_NAME}" \
            -F "variables[NAMESPACE]=$ns" \
            -F "variables[IMAGE_TAG]=$IMAGE_TAG" \
            -F "variables[COMPONENT_TYPE]=$COMPONENT_TYPE" \
            -F "variables[CI_COMMIT_BRANCH]=$CI_COMMIT_BRANCH" \
            -F "ref=master" \
            "${RESTART_TRIGGER_URL}"
        done

      elif [ "$COMPONENT_TYPE" = "test" ]; then
        echo "üîÅ Restarting test component on k9-test"
        curl -X POST \
          -F "token=${RESTART_TRIGGER_TOKEN}" \
          -F "variables[TRIGGER_JOB]=restart-${COMPONENT_NAME}" \
          -F "variables[NAMESPACE]=k9-test" \
          -F "variables[IMAGE_TAG]=$IMAGE_TAG" \
          -F "variables[COMPONENT_TYPE]=$COMPONENT_TYPE" \
          -F "variables[CI_COMMIT_BRANCH]=$CI_COMMIT_BRANCH" \
          -F "ref=master" \
          "${RESTART_TRIGGER_URL}"


      else
        echo "üîç Component type not specified or unknown, letting target pipeline auto-detect"
        curl -X POST \
          -F "token=${RESTART_TRIGGER_TOKEN}" \
          -F "variables[TRIGGER_JOB]=restart-${COMPONENT_NAME}" \
          -F "variables[IMAGE_TAG]=$IMAGE_TAG" \
          -F "variables[CI_COMMIT_BRANCH]=$CI_COMMIT_BRANCH" \
          -F "ref=master" \
          "${RESTART_TRIGGER_URL}"
      fi

    elif echo "$CI_COMMIT_BRANCH" | grep -qE "^[0-9]+-.*$"; then
      # üîÅ Feature branch: pass user info to target pipeline for namespace determination
      echo "üåø Feature branch ‚û§ component type: $COMPONENT_TYPE, user: $GITLAB_USER_LOGIN"

      # Determine IMAGE_TAG based on component type
      case "$COMPONENT_TYPE" in
        "backend")
          IMAGE_TAG="999-SNAPSHOT"
          ;;
        "backend-oracle")
          IMAGE_TAG="999-SNAPSHOT"
          ;;
        "ai")
          IMAGE_TAG="997-SNAPSHOT"
          ;;
        "frontend")
          IMAGE_TAG="996-SNAPSHOT"
          ;;
        "test")
          IMAGE_TAG="latest"
          ;;
        *)
          IMAGE_TAG="latest"
          ;;
      esac

      echo "üîß Using IMAGE_TAG: $IMAGE_TAG for component type: $COMPONENT_TYPE"

      # Single call - let target pipeline determine namespace based on user + component type
      curl -X POST \
        -F "token=${RESTART_TRIGGER_TOKEN}" \
        -F "variables[TRIGGER_JOB]=restart-${COMPONENT_NAME}" \
        -F "variables[COMPONENT_TYPE]=$COMPONENT_TYPE" \
        -F "variables[IMAGE_TAG]=$IMAGE_TAG" \
        -F "variables[GITLAB_USER_LOGIN]=$GITLAB_USER_LOGIN" \
        -F "variables[CI_COMMIT_BRANCH]=$CI_COMMIT_BRANCH" \
        -F "ref=master" \
        "${RESTART_TRIGGER_URL}"

    else
      echo "‚õî Branch $CI_COMMIT_BRANCH doesn'\''t match any pattern"
    fi
    '
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
  - if: '$CI_COMMIT_TAG'
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
    when: never
  - if: '$CI_COMMIT_BRANCH =~ /^([0-9]+-.*)$/'
